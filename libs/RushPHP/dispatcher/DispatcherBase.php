<?phpnamespace RushPHP\dispatcher;use RaftPHP\view\ViewBase;use RaftPHP\ControlBase;use RaftPHP\Framework;/** * ����ַ������� *  * @package dispatcher */abstract class DispatcherBase{	protected $class_name;	protected $method_name;	public function dispatch()	{	    // ��ȡ����������ͷ�����		$control_class  = Framework::CTRL_NAMESPACE."\\".$this->class_name;        $control_method = $this->method_name; 		try		{			// ��ʼ��������			$control = new $control_class();     			// ִ��ǰ�ù�����			$filter_view = false;			if ($control instanceof ControlBase)			{				$filter_view = $control->beforeFilter();			}			if ($filter_view && $filter_view instanceof ViewBase)			{				$filter_view->display();			}			else			{				$action_view = $control->$control_method();				if ($action_view instanceof ViewBase)				{					$action_view->display();				}			}					if ($control instanceof ControlBase)			{				$control->afterFilter();			}		}		catch(\Exception $e)		{			throw $e;		}	}}